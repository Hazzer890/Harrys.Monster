{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Harry's Monster Commands This is the webiste of the Harry Cassidy Contact me: Mobile - 0411 745 653 Email - harryc5663@gmail.com The remainder of this site is a collection of work that I have no other place to display.","title":"Home"},{"location":"#harrys-monster","text":"","title":"Harry's Monster"},{"location":"#commands","text":"This is the webiste of the Harry Cassidy Contact me: Mobile - 0411 745 653 Email - harryc5663@gmail.com The remainder of this site is a collection of work that I have no other place to display.","title":"Commands"},{"location":"PID/","text":"Simple PID Visualiser .controls { display: flex; justify-content: center; flex-wrap: wrap; gap: 1.5rem; margin-bottom: 20px; } .slider-box { padding: 15px; border-radius: 12px; box-shadow: 0 0 10px #0004; width: 220px; } label { display: block; margin-bottom: 6px; font-weight: bold; } input[type=range] { width: 100%; } select { font-size: 16px; padding: 8px; border-radius: 8px; border: none; background: #ec0080; color: #EFEFEF; margin-bottom: 20px; } button { background: #ec0080; border: none; color: #efefef; font-weight: bold; font-size: 16px; padding: 10px 24px; border-radius: 8px; cursor: pointer; margin-bottom: 20px; transition: 0.2s; } button:hover { background: #ec60a8; } button:disabled { background: #334155; color: #94a3b8; cursor: not-allowed; } System Type: Speed Control (1st Order) Position Control (2nd Order) Kp: 1.00 Ki: 0.00 Kd: 0.00 Start Simulation // --- Chart setup --- const ctx = document.getElementById(\"chart\"); const chart = new Chart(ctx, { type: \"line\", data: { labels: [], datasets: [ { label: \"Output\", data: [], borderColor: \"#38bdf8\", borderWidth: 2, fill: false }, { label: \"Setpoint\", data: [], borderColor: \"#f87171\", borderDash: [6, 4], borderWidth: 2, fill: false } ] }, options: { animation: false, scales: { x: { title: { display: true, text: \"Time (s)\" } }, y: { title: { display: true, text: \"Output\" }, suggestedMin: 0, suggestedMax: 2 } }, plugins: { legend: { labels: { color: \"#f8fafc\" } } } } }); // --- Simulation Variables --- let Kp = 1.0, Ki = 0.0, Kd = 0.0; const setpoint = 1.0; let plantType = \"speed\"; // default let y = 0, v = 0, integral = 0, prevError = 0; const tau = 1.5; // first-order time constant for speed system const dt = 0.01; let t = 0; let running = false; let lastTime = 0; const toggleBtn = document.getElementById(\"toggleBtn\"); function resetSim() { y = 0; v = 0; integral = 0; prevError = 0; t = 0; chart.data.labels = []; chart.data.datasets[0].data = []; chart.data.datasets[1].data = []; chart.update(); } function stepPID() { const error = setpoint - y; integral += error * dt; const derivative = (error - prevError) / dt; const u = Kp * error + Ki * integral + Kd * derivative; prevError = error; if (plantType === \"speed\") { // First-order system: dy/dt = (-y + u) / tau y += ((-y + u) / tau) * dt; } else { // Position control: d\u00b2y/dt\u00b2 = (-v + u) / tau const a = ((-v + u) / tau); v += a * dt; y += v * dt; } t += dt; chart.data.labels.push(t.toFixed(2)); chart.data.datasets[0].data.push(y); chart.data.datasets[1].data.push(setpoint); if (chart.data.labels.length > 400) { chart.data.labels.shift(); chart.data.datasets[0].data.shift(); chart.data.datasets[1].data.shift(); } } // --- Simulation loop --- function loop(timestamp) { if (!running) return; if (timestamp - lastTime > dt * 1000) { stepPID(); chart.update(\"none\"); lastTime = timestamp; } if (t < 4) { requestAnimationFrame(loop); } else { running = false; toggleBtn.textContent = \"Start Simulation\"; toggleBtn.disabled = false; } } toggleBtn.onclick = () => { if (!running) { resetSim(); running = true; toggleBtn.textContent = \"Running...\"; toggleBtn.disabled = true; requestAnimationFrame(loop); } }; // --- UI Updates --- function updateLabel(id, val) { document.getElementById(id + \"Val\").textContent = val.toFixed(2); } document.getElementById(\"kp\").oninput = e => { Kp = parseFloat(e.target.value); updateLabel(\"kp\", Kp); resetSim(); }; document.getElementById(\"ki\").oninput = e => { Ki = parseFloat(e.target.value); updateLabel(\"ki\", Ki); resetSim(); }; document.getElementById(\"kd\").oninput = e => { Kd = parseFloat(e.target.value); updateLabel(\"kd\", Kd); resetSim(); }; document.getElementById(\"plantSelect\").onchange = e => { plantType = e.target.value; resetSim(); };","title":"PID Visualizer"},{"location":"PID/#simple-pid-visualiser","text":".controls { display: flex; justify-content: center; flex-wrap: wrap; gap: 1.5rem; margin-bottom: 20px; } .slider-box { padding: 15px; border-radius: 12px; box-shadow: 0 0 10px #0004; width: 220px; } label { display: block; margin-bottom: 6px; font-weight: bold; } input[type=range] { width: 100%; } select { font-size: 16px; padding: 8px; border-radius: 8px; border: none; background: #ec0080; color: #EFEFEF; margin-bottom: 20px; } button { background: #ec0080; border: none; color: #efefef; font-weight: bold; font-size: 16px; padding: 10px 24px; border-radius: 8px; cursor: pointer; margin-bottom: 20px; transition: 0.2s; } button:hover { background: #ec60a8; } button:disabled { background: #334155; color: #94a3b8; cursor: not-allowed; } System Type: Speed Control (1st Order) Position Control (2nd Order) Kp: 1.00 Ki: 0.00 Kd: 0.00 Start Simulation // --- Chart setup --- const ctx = document.getElementById(\"chart\"); const chart = new Chart(ctx, { type: \"line\", data: { labels: [], datasets: [ { label: \"Output\", data: [], borderColor: \"#38bdf8\", borderWidth: 2, fill: false }, { label: \"Setpoint\", data: [], borderColor: \"#f87171\", borderDash: [6, 4], borderWidth: 2, fill: false } ] }, options: { animation: false, scales: { x: { title: { display: true, text: \"Time (s)\" } }, y: { title: { display: true, text: \"Output\" }, suggestedMin: 0, suggestedMax: 2 } }, plugins: { legend: { labels: { color: \"#f8fafc\" } } } } }); // --- Simulation Variables --- let Kp = 1.0, Ki = 0.0, Kd = 0.0; const setpoint = 1.0; let plantType = \"speed\"; // default let y = 0, v = 0, integral = 0, prevError = 0; const tau = 1.5; // first-order time constant for speed system const dt = 0.01; let t = 0; let running = false; let lastTime = 0; const toggleBtn = document.getElementById(\"toggleBtn\"); function resetSim() { y = 0; v = 0; integral = 0; prevError = 0; t = 0; chart.data.labels = []; chart.data.datasets[0].data = []; chart.data.datasets[1].data = []; chart.update(); } function stepPID() { const error = setpoint - y; integral += error * dt; const derivative = (error - prevError) / dt; const u = Kp * error + Ki * integral + Kd * derivative; prevError = error; if (plantType === \"speed\") { // First-order system: dy/dt = (-y + u) / tau y += ((-y + u) / tau) * dt; } else { // Position control: d\u00b2y/dt\u00b2 = (-v + u) / tau const a = ((-v + u) / tau); v += a * dt; y += v * dt; } t += dt; chart.data.labels.push(t.toFixed(2)); chart.data.datasets[0].data.push(y); chart.data.datasets[1].data.push(setpoint); if (chart.data.labels.length > 400) { chart.data.labels.shift(); chart.data.datasets[0].data.shift(); chart.data.datasets[1].data.shift(); } } // --- Simulation loop --- function loop(timestamp) { if (!running) return; if (timestamp - lastTime > dt * 1000) { stepPID(); chart.update(\"none\"); lastTime = timestamp; } if (t < 4) { requestAnimationFrame(loop); } else { running = false; toggleBtn.textContent = \"Start Simulation\"; toggleBtn.disabled = false; } } toggleBtn.onclick = () => { if (!running) { resetSim(); running = true; toggleBtn.textContent = \"Running...\"; toggleBtn.disabled = true; requestAnimationFrame(loop); } }; // --- UI Updates --- function updateLabel(id, val) { document.getElementById(id + \"Val\").textContent = val.toFixed(2); } document.getElementById(\"kp\").oninput = e => { Kp = parseFloat(e.target.value); updateLabel(\"kp\", Kp); resetSim(); }; document.getElementById(\"ki\").oninput = e => { Ki = parseFloat(e.target.value); updateLabel(\"ki\", Ki); resetSim(); }; document.getElementById(\"kd\").oninput = e => { Kd = parseFloat(e.target.value); updateLabel(\"kd\", Kd); resetSim(); }; document.getElementById(\"plantSelect\").onchange = e => { plantType = e.target.value; resetSim(); };","title":"Simple PID Visualiser"},{"location":"about/","text":"ABout me","title":"About"},{"location":"about/#about-me","text":"","title":"ABout me"}]}